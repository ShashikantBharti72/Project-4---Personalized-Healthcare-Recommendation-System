{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#  STEP 1: Import Libraries"
      ],
      "metadata": {
        "id": "yD_66iMSG2Cg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# ✅ Step 1: Import Required Libraries\n",
        "\n",
        "# Core\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Visualization\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Preprocessing\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "# Models\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "\n",
        "# Metrics\n",
        "from sklearn.metrics import (\n",
        "    accuracy_score, classification_report,\n",
        "    confusion_matrix, roc_auc_score, roc_curve\n",
        ")\n",
        "\n",
        "# Utilities\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "print(\"✅ All Libraries Imported\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CEB7rZlWF9To",
        "outputId": "5c9db623-54c7-4ff9-df6d-74e586b151f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ All Libraries Imported\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  STEP 2: Load the Final Dataset"
      ],
      "metadata": {
        "id": "R6AHxISRHGED"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#  Step 2: Load Final Enhanced Dataset\n",
        "\n",
        "df = pd.read_csv(\"/content/enhanced_healthcare_data.csv\")\n",
        "\n",
        "print(\"📦 Dataset Loaded Successfully\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R2-bQA-4F9NY",
        "outputId": "1e4e5cd5-69e7-42ee-9aec-f6df154369e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📦 Dataset Loaded Successfully\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"🔹 Shape:\", df.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hUHZddO3F9IM",
        "outputId": "a750d4e4-695b-4313-b1f4-00a8a1f24211"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔹 Shape: (748, 13)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.ndim"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zu98fD8IHaMt",
        "outputId": "e74c0a4b-516b-4dbe-9b4b-169ee4012155"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "iR4-6ZweuoSh",
        "outputId": "54a7c1da-2621-4596-e599-cdbfb0ed3766"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Recency  Frequency  Monetary  Time  Class  Age  Gender  Blood_Pressure  \\\n",
              "0          2         50     12500    99      1   58  Female             148   \n",
              "1          0         13      3250    28      1   48  Female              98   \n",
              "2          1         17      4000    36      1   34  Female             124   \n",
              "3          2         20      5000    45      1   62    Male             124   \n",
              "4          1         24      6000    77      0   27  Female             108   \n",
              "..       ...        ...       ...   ...    ...  ...     ...             ...   \n",
              "743       23          2       500    38      0   29  Female             162   \n",
              "744       21          2       500    52      0   51  Female             120   \n",
              "745       23          3       750    62      0   35  Female             143   \n",
              "746       39          1       250    39      0   27  Female             130   \n",
              "747       72          1       250    72      0   57    Male             134   \n",
              "\n",
              "     Cholesterol  Heart_Rate Smoking_Status Exercise_Level  Recommendation  \n",
              "0            248          66     Non-Smoker       Moderate               2  \n",
              "1            222          62     Non-Smoker           High               0  \n",
              "2            223          72     Non-Smoker            Low               1  \n",
              "3            236          79     Non-Smoker            Low               1  \n",
              "4            200          84         Smoker            Low               2  \n",
              "..           ...         ...            ...            ...             ...  \n",
              "743          216          87         Smoker           High               2  \n",
              "744          222          69         Smoker           High               1  \n",
              "745          238          78     Non-Smoker            Low               2  \n",
              "746          249          67     Non-Smoker       Moderate               1  \n",
              "747          184          82     Non-Smoker           High               0  \n",
              "\n",
              "[748 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-efb98126-ce2b-494e-af10-6fc48495648b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recency</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Monetary</th>\n",
              "      <th>Time</th>\n",
              "      <th>Class</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Blood_Pressure</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Smoking_Status</th>\n",
              "      <th>Exercise_Level</th>\n",
              "      <th>Recommendation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>50</td>\n",
              "      <td>12500</td>\n",
              "      <td>99</td>\n",
              "      <td>1</td>\n",
              "      <td>58</td>\n",
              "      <td>Female</td>\n",
              "      <td>148</td>\n",
              "      <td>248</td>\n",
              "      <td>66</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>Moderate</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>3250</td>\n",
              "      <td>28</td>\n",
              "      <td>1</td>\n",
              "      <td>48</td>\n",
              "      <td>Female</td>\n",
              "      <td>98</td>\n",
              "      <td>222</td>\n",
              "      <td>62</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>High</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>4000</td>\n",
              "      <td>36</td>\n",
              "      <td>1</td>\n",
              "      <td>34</td>\n",
              "      <td>Female</td>\n",
              "      <td>124</td>\n",
              "      <td>223</td>\n",
              "      <td>72</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>Low</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>20</td>\n",
              "      <td>5000</td>\n",
              "      <td>45</td>\n",
              "      <td>1</td>\n",
              "      <td>62</td>\n",
              "      <td>Male</td>\n",
              "      <td>124</td>\n",
              "      <td>236</td>\n",
              "      <td>79</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>Low</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>24</td>\n",
              "      <td>6000</td>\n",
              "      <td>77</td>\n",
              "      <td>0</td>\n",
              "      <td>27</td>\n",
              "      <td>Female</td>\n",
              "      <td>108</td>\n",
              "      <td>200</td>\n",
              "      <td>84</td>\n",
              "      <td>Smoker</td>\n",
              "      <td>Low</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>743</th>\n",
              "      <td>23</td>\n",
              "      <td>2</td>\n",
              "      <td>500</td>\n",
              "      <td>38</td>\n",
              "      <td>0</td>\n",
              "      <td>29</td>\n",
              "      <td>Female</td>\n",
              "      <td>162</td>\n",
              "      <td>216</td>\n",
              "      <td>87</td>\n",
              "      <td>Smoker</td>\n",
              "      <td>High</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>744</th>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>500</td>\n",
              "      <td>52</td>\n",
              "      <td>0</td>\n",
              "      <td>51</td>\n",
              "      <td>Female</td>\n",
              "      <td>120</td>\n",
              "      <td>222</td>\n",
              "      <td>69</td>\n",
              "      <td>Smoker</td>\n",
              "      <td>High</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>745</th>\n",
              "      <td>23</td>\n",
              "      <td>3</td>\n",
              "      <td>750</td>\n",
              "      <td>62</td>\n",
              "      <td>0</td>\n",
              "      <td>35</td>\n",
              "      <td>Female</td>\n",
              "      <td>143</td>\n",
              "      <td>238</td>\n",
              "      <td>78</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>Low</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>746</th>\n",
              "      <td>39</td>\n",
              "      <td>1</td>\n",
              "      <td>250</td>\n",
              "      <td>39</td>\n",
              "      <td>0</td>\n",
              "      <td>27</td>\n",
              "      <td>Female</td>\n",
              "      <td>130</td>\n",
              "      <td>249</td>\n",
              "      <td>67</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>Moderate</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>747</th>\n",
              "      <td>72</td>\n",
              "      <td>1</td>\n",
              "      <td>250</td>\n",
              "      <td>72</td>\n",
              "      <td>0</td>\n",
              "      <td>57</td>\n",
              "      <td>Male</td>\n",
              "      <td>134</td>\n",
              "      <td>184</td>\n",
              "      <td>82</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>High</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>748 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-efb98126-ce2b-494e-af10-6fc48495648b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-efb98126-ce2b-494e-af10-6fc48495648b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-efb98126-ce2b-494e-af10-6fc48495648b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-58ddda6d-2f28-40d7-9ba7-5f4633fdab16\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58ddda6d-2f28-40d7-9ba7-5f4633fdab16')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-58ddda6d-2f28-40d7-9ba7-5f4633fdab16 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_b2655c3c-b3b3-49e2-9ecb-88a47cbb2e57\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b2655c3c-b3b3-49e2-9ecb-88a47cbb2e57 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 748,\n  \"fields\": [\n    {\n      \"column\": \"Recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 0,\n        \"max\": 74,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          17,\n          16,\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 50,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          21,\n          14,\n          43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1459,\n        \"min\": 250,\n        \"max\": 12500,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          5250,\n          3500,\n          10750\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 2,\n        \"max\": 99,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          9,\n          99,\n          57\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Class\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 20,\n        \"max\": 70,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          67,\n          53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Blood_Pressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 86,\n        \"max\": 169,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          118,\n          104\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cholesterol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 134,\n        \"max\": 289,\n        \"num_unique_values\": 122,\n        \"samples\": [\n          228,\n          253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Heart_Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 47,\n        \"max\": 114,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          61,\n          49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Smoking_Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Smoker\",\n          \"Non-Smoker\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exercise_Level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Moderate\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recommendation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "WTD04JM2F9Fo",
        "outputId": "6434375a-0784-4c32-c8eb-dbe2c3cf187e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Recency  Frequency  Monetary  Time  Class  Age  Gender  Blood_Pressure  \\\n",
              "0        2         50     12500    99      1   58  Female             148   \n",
              "1        0         13      3250    28      1   48  Female              98   \n",
              "2        1         17      4000    36      1   34  Female             124   \n",
              "3        2         20      5000    45      1   62    Male             124   \n",
              "4        1         24      6000    77      0   27  Female             108   \n",
              "\n",
              "   Cholesterol  Heart_Rate Smoking_Status Exercise_Level  Recommendation  \n",
              "0          248          66     Non-Smoker       Moderate               2  \n",
              "1          222          62     Non-Smoker           High               0  \n",
              "2          223          72     Non-Smoker            Low               1  \n",
              "3          236          79     Non-Smoker            Low               1  \n",
              "4          200          84         Smoker            Low               2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b48521f0-a91c-443b-a682-c738ed304d64\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recency</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Monetary</th>\n",
              "      <th>Time</th>\n",
              "      <th>Class</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Blood_Pressure</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Smoking_Status</th>\n",
              "      <th>Exercise_Level</th>\n",
              "      <th>Recommendation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>50</td>\n",
              "      <td>12500</td>\n",
              "      <td>99</td>\n",
              "      <td>1</td>\n",
              "      <td>58</td>\n",
              "      <td>Female</td>\n",
              "      <td>148</td>\n",
              "      <td>248</td>\n",
              "      <td>66</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>Moderate</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>3250</td>\n",
              "      <td>28</td>\n",
              "      <td>1</td>\n",
              "      <td>48</td>\n",
              "      <td>Female</td>\n",
              "      <td>98</td>\n",
              "      <td>222</td>\n",
              "      <td>62</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>High</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>4000</td>\n",
              "      <td>36</td>\n",
              "      <td>1</td>\n",
              "      <td>34</td>\n",
              "      <td>Female</td>\n",
              "      <td>124</td>\n",
              "      <td>223</td>\n",
              "      <td>72</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>Low</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>20</td>\n",
              "      <td>5000</td>\n",
              "      <td>45</td>\n",
              "      <td>1</td>\n",
              "      <td>62</td>\n",
              "      <td>Male</td>\n",
              "      <td>124</td>\n",
              "      <td>236</td>\n",
              "      <td>79</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>Low</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>24</td>\n",
              "      <td>6000</td>\n",
              "      <td>77</td>\n",
              "      <td>0</td>\n",
              "      <td>27</td>\n",
              "      <td>Female</td>\n",
              "      <td>108</td>\n",
              "      <td>200</td>\n",
              "      <td>84</td>\n",
              "      <td>Smoker</td>\n",
              "      <td>Low</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b48521f0-a91c-443b-a682-c738ed304d64')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b48521f0-a91c-443b-a682-c738ed304d64 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b48521f0-a91c-443b-a682-c738ed304d64');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f86d14b4-d32f-4f74-9360-fd93c83acb7a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f86d14b4-d32f-4f74-9360-fd93c83acb7a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f86d14b4-d32f-4f74-9360-fd93c83acb7a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 748,\n  \"fields\": [\n    {\n      \"column\": \"Recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 0,\n        \"max\": 74,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          17,\n          16,\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 50,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          21,\n          14,\n          43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1459,\n        \"min\": 250,\n        \"max\": 12500,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          5250,\n          3500,\n          10750\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 2,\n        \"max\": 99,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          9,\n          99,\n          57\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Class\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 20,\n        \"max\": 70,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          67,\n          53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Blood_Pressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 86,\n        \"max\": 169,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          118,\n          104\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cholesterol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 134,\n        \"max\": 289,\n        \"num_unique_values\": 122,\n        \"samples\": [\n          228,\n          253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Heart_Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 47,\n        \"max\": 114,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          61,\n          49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Smoking_Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Smoker\",\n          \"Non-Smoker\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exercise_Level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Moderate\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recommendation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "ZcW56CMsF9DL",
        "outputId": "ec1bdd11-98b1-42d2-ea89-2b5786c36d9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Recency  Frequency  Monetary  Time  Class  Age  Gender  Blood_Pressure  \\\n",
              "743       23          2       500    38      0   29  Female             162   \n",
              "744       21          2       500    52      0   51  Female             120   \n",
              "745       23          3       750    62      0   35  Female             143   \n",
              "746       39          1       250    39      0   27  Female             130   \n",
              "747       72          1       250    72      0   57    Male             134   \n",
              "\n",
              "     Cholesterol  Heart_Rate Smoking_Status Exercise_Level  Recommendation  \n",
              "743          216          87         Smoker           High               2  \n",
              "744          222          69         Smoker           High               1  \n",
              "745          238          78     Non-Smoker            Low               2  \n",
              "746          249          67     Non-Smoker       Moderate               1  \n",
              "747          184          82     Non-Smoker           High               0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9910fdf1-a4b7-40ae-a168-19039b177b6c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recency</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Monetary</th>\n",
              "      <th>Time</th>\n",
              "      <th>Class</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Blood_Pressure</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Smoking_Status</th>\n",
              "      <th>Exercise_Level</th>\n",
              "      <th>Recommendation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>743</th>\n",
              "      <td>23</td>\n",
              "      <td>2</td>\n",
              "      <td>500</td>\n",
              "      <td>38</td>\n",
              "      <td>0</td>\n",
              "      <td>29</td>\n",
              "      <td>Female</td>\n",
              "      <td>162</td>\n",
              "      <td>216</td>\n",
              "      <td>87</td>\n",
              "      <td>Smoker</td>\n",
              "      <td>High</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>744</th>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>500</td>\n",
              "      <td>52</td>\n",
              "      <td>0</td>\n",
              "      <td>51</td>\n",
              "      <td>Female</td>\n",
              "      <td>120</td>\n",
              "      <td>222</td>\n",
              "      <td>69</td>\n",
              "      <td>Smoker</td>\n",
              "      <td>High</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>745</th>\n",
              "      <td>23</td>\n",
              "      <td>3</td>\n",
              "      <td>750</td>\n",
              "      <td>62</td>\n",
              "      <td>0</td>\n",
              "      <td>35</td>\n",
              "      <td>Female</td>\n",
              "      <td>143</td>\n",
              "      <td>238</td>\n",
              "      <td>78</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>Low</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>746</th>\n",
              "      <td>39</td>\n",
              "      <td>1</td>\n",
              "      <td>250</td>\n",
              "      <td>39</td>\n",
              "      <td>0</td>\n",
              "      <td>27</td>\n",
              "      <td>Female</td>\n",
              "      <td>130</td>\n",
              "      <td>249</td>\n",
              "      <td>67</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>Moderate</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>747</th>\n",
              "      <td>72</td>\n",
              "      <td>1</td>\n",
              "      <td>250</td>\n",
              "      <td>72</td>\n",
              "      <td>0</td>\n",
              "      <td>57</td>\n",
              "      <td>Male</td>\n",
              "      <td>134</td>\n",
              "      <td>184</td>\n",
              "      <td>82</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>High</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9910fdf1-a4b7-40ae-a168-19039b177b6c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9910fdf1-a4b7-40ae-a168-19039b177b6c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9910fdf1-a4b7-40ae-a168-19039b177b6c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-435c0dac-8b57-4eaa-9cb6-c2ee78ff9845\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-435c0dac-8b57-4eaa-9cb6-c2ee78ff9845')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-435c0dac-8b57-4eaa-9cb6-c2ee78ff9845 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": 21,\n        \"max\": 72,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          21,\n          72,\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 209,\n        \"min\": 250,\n        \"max\": 750,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          500,\n          750,\n          250\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 38,\n        \"max\": 72,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          52,\n          72,\n          62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Class\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 27,\n        \"max\": 57,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          51\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Blood_Pressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 120,\n        \"max\": 162,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          120\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cholesterol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 184,\n        \"max\": 249,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          222\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Heart_Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 67,\n        \"max\": 87,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Smoking_Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Non-Smoker\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exercise_Level\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recommendation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ✅ STEP 3: Dataset Info, Nulls, and Stats\n",
        "\n",
        "\n",
        "1. Explore Dataset\n",
        "2. Datatypes\n",
        "3. Null values\n",
        "4. Stats summary\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "HQcnCuVWH1KA"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "yFvEAFl18lxk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Column summary"
      ],
      "metadata": {
        "id": "MH9Ib89GJOUz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T94ccp15JRWS",
        "outputId": "939ee762-caf3-400f-89a1-c6132e32f3e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Recency', 'Frequency', 'Monetary', 'Time', 'Class', 'Age', 'Gender',\n",
              "       'Blood_Pressure', 'Cholesterol', 'Heart_Rate', 'Smoking_Status',\n",
              "       'Exercise_Level', 'Recommendation'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns.tolist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nEtfj6dgJVJn",
        "outputId": "4195c81b-9ea1-4d1d-b6de-5df0c78a547f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Recency',\n",
              " 'Frequency',\n",
              " 'Monetary',\n",
              " 'Time',\n",
              " 'Class',\n",
              " 'Age',\n",
              " 'Gender',\n",
              " 'Blood_Pressure',\n",
              " 'Cholesterol',\n",
              " 'Heart_Rate',\n",
              " 'Smoking_Status',\n",
              " 'Exercise_Level',\n",
              " 'Recommendation']"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Datatypes"
      ],
      "metadata": {
        "id": "KYIiSHluJc3r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 491
        },
        "id": "7qvsal-7J6wV",
        "outputId": "94f06fc3-d697-4251-eed4-88dcd207f16a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Recency            int64\n",
              "Frequency          int64\n",
              "Monetary           int64\n",
              "Time               int64\n",
              "Class              int64\n",
              "Age                int64\n",
              "Gender            object\n",
              "Blood_Pressure     int64\n",
              "Cholesterol        int64\n",
              "Heart_Rate         int64\n",
              "Smoking_Status    object\n",
              "Exercise_Level    object\n",
              "Recommendation     int64\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Recency</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Frequency</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Monetary</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Time</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Class</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Blood_Pressure</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cholesterol</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Heart_Rate</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Smoking_Status</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Exercise_Level</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Recommendation</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Null Values"
      ],
      "metadata": {
        "id": "YIg_KoTMJ_n7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 491
        },
        "id": "ignjCBy2KCVo",
        "outputId": "5f5d326b-45cb-411b-ed35-7a1718cbc4a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Recency           0\n",
              "Frequency         0\n",
              "Monetary          0\n",
              "Time              0\n",
              "Class             0\n",
              "Age               0\n",
              "Gender            0\n",
              "Blood_Pressure    0\n",
              "Cholesterol       0\n",
              "Heart_Rate        0\n",
              "Smoking_Status    0\n",
              "Exercise_Level    0\n",
              "Recommendation    0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Recency</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Frequency</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Monetary</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Time</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Class</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Blood_Pressure</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cholesterol</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Heart_Rate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Smoking_Status</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Exercise_Level</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Recommendation</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Stats Summary"
      ],
      "metadata": {
        "id": "SbDltxnRKGul"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe(include='all')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "id": "LigL5ASXKO13",
        "outputId": "d670dc51-c8b6-4caf-b540-f247f3578051"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Recency   Frequency      Monetary        Time       Class  \\\n",
              "count   748.000000  748.000000    748.000000  748.000000  748.000000   \n",
              "unique         NaN         NaN           NaN         NaN         NaN   \n",
              "top            NaN         NaN           NaN         NaN         NaN   \n",
              "freq           NaN         NaN           NaN         NaN         NaN   \n",
              "mean      9.506684    5.516043   1378.676471   34.284759    0.237968   \n",
              "std       8.095396    5.841825   1459.826781   24.380307    0.426124   \n",
              "min       0.000000    1.000000    250.000000    2.000000    0.000000   \n",
              "25%       2.750000    2.000000    500.000000   16.000000    0.000000   \n",
              "50%       7.000000    4.000000   1000.000000   28.000000    0.000000   \n",
              "75%      14.000000    7.000000   1750.000000   50.000000    0.000000   \n",
              "max      74.000000   50.000000  12500.000000   99.000000    1.000000   \n",
              "\n",
              "               Age Gender  Blood_Pressure  Cholesterol  Heart_Rate  \\\n",
              "count   748.000000    748      748.000000   748.000000  748.000000   \n",
              "unique         NaN      2             NaN          NaN         NaN   \n",
              "top            NaN   Male             NaN          NaN         NaN   \n",
              "freq           NaN    388             NaN          NaN         NaN   \n",
              "mean     45.394385    NaN      130.655080   210.328877   74.621658   \n",
              "std      14.546084    NaN       14.805794    24.623731    9.885281   \n",
              "min      20.000000    NaN       86.000000   134.000000   47.000000   \n",
              "25%      33.000000    NaN      120.000000   194.000000   68.000000   \n",
              "50%      46.000000    NaN      131.000000   210.000000   74.000000   \n",
              "75%      58.000000    NaN      140.000000   226.250000   81.000000   \n",
              "max      70.000000    NaN      169.000000   289.000000  114.000000   \n",
              "\n",
              "       Smoking_Status Exercise_Level  Recommendation  \n",
              "count             748            748      748.000000  \n",
              "unique              2              3             NaN  \n",
              "top        Non-Smoker            Low             NaN  \n",
              "freq              519            306             NaN  \n",
              "mean              NaN            NaN        1.090909  \n",
              "std               NaN            NaN        0.765573  \n",
              "min               NaN            NaN        0.000000  \n",
              "25%               NaN            NaN        1.000000  \n",
              "50%               NaN            NaN        1.000000  \n",
              "75%               NaN            NaN        2.000000  \n",
              "max               NaN            NaN        3.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-acbdda89-f326-473c-b487-0c285f18b0cf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recency</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Monetary</th>\n",
              "      <th>Time</th>\n",
              "      <th>Class</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Blood_Pressure</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Smoking_Status</th>\n",
              "      <th>Exercise_Level</th>\n",
              "      <th>Recommendation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>748.000000</td>\n",
              "      <td>748.000000</td>\n",
              "      <td>748.000000</td>\n",
              "      <td>748.000000</td>\n",
              "      <td>748.000000</td>\n",
              "      <td>748.000000</td>\n",
              "      <td>748</td>\n",
              "      <td>748.000000</td>\n",
              "      <td>748.000000</td>\n",
              "      <td>748.000000</td>\n",
              "      <td>748</td>\n",
              "      <td>748</td>\n",
              "      <td>748.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Non-Smoker</td>\n",
              "      <td>Low</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>388</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>519</td>\n",
              "      <td>306</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>9.506684</td>\n",
              "      <td>5.516043</td>\n",
              "      <td>1378.676471</td>\n",
              "      <td>34.284759</td>\n",
              "      <td>0.237968</td>\n",
              "      <td>45.394385</td>\n",
              "      <td>NaN</td>\n",
              "      <td>130.655080</td>\n",
              "      <td>210.328877</td>\n",
              "      <td>74.621658</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.090909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>8.095396</td>\n",
              "      <td>5.841825</td>\n",
              "      <td>1459.826781</td>\n",
              "      <td>24.380307</td>\n",
              "      <td>0.426124</td>\n",
              "      <td>14.546084</td>\n",
              "      <td>NaN</td>\n",
              "      <td>14.805794</td>\n",
              "      <td>24.623731</td>\n",
              "      <td>9.885281</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.765573</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>250.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>86.000000</td>\n",
              "      <td>134.000000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.750000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>33.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>194.000000</td>\n",
              "      <td>68.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>46.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>131.000000</td>\n",
              "      <td>210.000000</td>\n",
              "      <td>74.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>14.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>1750.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>58.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>226.250000</td>\n",
              "      <td>81.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>74.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>12500.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>169.000000</td>\n",
              "      <td>289.000000</td>\n",
              "      <td>114.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-acbdda89-f326-473c-b487-0c285f18b0cf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-acbdda89-f326-473c-b487-0c285f18b0cf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-acbdda89-f326-473c-b487-0c285f18b0cf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9ff7dfa4-1d0f-4950-9c21-9053f52b2617\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9ff7dfa4-1d0f-4950-9c21-9053f52b2617')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9ff7dfa4-1d0f-4950-9c21-9053f52b2617 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"Recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 259.7296322821676,\n        \"min\": 0.0,\n        \"max\": 748.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.506684491978609,\n          7.0,\n          748.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 261.15096383143543,\n        \"min\": 1.0,\n        \"max\": 748.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.516042780748663,\n          4.0,\n          748.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4092.893812773351,\n        \"min\": 250.0,\n        \"max\": 12500.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1378.6764705882354,\n          1000.0,\n          748.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 253.32143072517542,\n        \"min\": 2.0,\n        \"max\": 748.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          34.28475935828877,\n          28.0,\n          748.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Class\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 264.37411446957356,\n        \"min\": 0.0,\n        \"max\": 748.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.23796791443850268,\n          1.0,\n          0.42612432780145154\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 250.64417491272891,\n        \"min\": 14.54608410560653,\n        \"max\": 748.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          45.394385026737964,\n          46.0,\n          748.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"388\",\n          \"748\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Blood_Pressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 229.1816150456231,\n        \"min\": 14.805793698247202,\n        \"max\": 748.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          130.65508021390374,\n          131.0,\n          748.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cholesterol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 213.97112446044005,\n        \"min\": 24.623730575172047,\n        \"max\": 748.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          210.3288770053476,\n          210.0,\n          748.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Heart_Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242.619622654462,\n        \"min\": 9.88528101008973,\n        \"max\": 748.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          74.6216577540107,\n          74.0,\n          748.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Smoking_Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"519\",\n          \"748\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exercise_Level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"306\",\n          \"748\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recommendation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 264.01212347123385,\n        \"min\": 0.0,\n        \"max\": 748.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          748.0,\n          1.0909090909090908,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ✅ STEP 4: Class Balance Check\n"
      ],
      "metadata": {
        "id": "ejxE3KXBKZhW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "✅Target Variable Distribution\n"
      ],
      "metadata": {
        "id": "AdnKHO95KmUT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "label_names = {\n",
        "    0: \"No Action Needed\",\n",
        "    1: \"Regular Check-up\",\n",
        "    2: \"Lifestyle Change\",\n",
        "    3: \"Medication\"\n",
        "}\n",
        "\n",
        "target_counts = df['Recommendation'].value_counts(normalize=True) * 100\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.countplot(data=df, x='Recommendation', palette='Set2', edgecolor='black')\n",
        "plt.title(\"📈 Class Distribution of Recommendations\")\n",
        "plt.ylabel(\"Number of Patients\")\n",
        "plt.xlabel(\"Recommendation Code\")\n",
        "plt.xticks(ticks=[0,1,2,3], labels=[label_names[i] for i in range(4)], rotation=15)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.5)\n",
        "plt.show()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "zbylFPwgF87Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "outputId": "ad1efe5f-3cf4-4194-c702-1d460f08259e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "✅ Print percentage of each class\n"
      ],
      "metadata": {
        "id": "otuyL7S6Ksiu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"📊 Percentage Distribution:\")\n",
        "for k, v in target_counts.items():\n",
        "    print(f\"{label_names[k]} ({k}): {v:.2f}%\")"
      ],
      "metadata": {
        "id": "vsTUiQhAF82w",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9dcc1751-8c10-4292-f263-18c4a1d1f0e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 Percentage Distribution:\n",
            "Regular Check-up (1): 43.45%\n",
            "Lifestyle Change (2): 31.42%\n",
            "No Action Needed (0): 24.20%\n",
            "Medication (3): 0.94%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 🎨 Boxplot for key features\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "numerical_features = ['Age', 'Blood_Pressure', 'Cholesterol', 'Heart_Rate']\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "for i, col in enumerate(numerical_features, 1):\n",
        "    plt.subplot(2, 2, i)\n",
        "    sns.boxplot(data=df, x='Recommendation', y=col, palette='Set2')\n",
        "    plt.title(f'{col} vs Recommendation')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 793
        },
        "id": "FFWaO1VXS7O5",
        "outputId": "c2687656-644d-47b0-dc47-579ad4eb78db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Feature-Target Split\n",
        "X = df.drop(columns=['Recommendation'])\n",
        "y = df['Recommendation']\n"
      ],
      "metadata": {
        "id": "8PJD4YMzaDs0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explore Target Variable (Recommendation Distribution)"
      ],
      "metadata": {
        "id": "72kA8Ro8aw3Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['Recommendation'].value_counts().plot(kind='bar', color='skyblue', edgecolor='black')\n",
        "plt.title(\"Target Class Distribution\")\n",
        "plt.xlabel(\"Recommendation Code\")\n",
        "plt.ylabel(\"Count\")\n",
        "plt.grid(axis='y')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "JpPu4iaIaqRq",
        "outputId": "17f81b46-abcc-4ab4-dd70-cf715cda3164"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ✅ STEP 5: Check Feature Correlation"
      ],
      "metadata": {
        "id": "-Z8DDnEaK8HI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "✅Correlation Heatmap (Numerical Features)"
      ],
      "metadata": {
        "id": "otzsP5f5LFT6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm', fmt=\".2f\")\n",
        "plt.title(\"🔗 Correlation Heatmap\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "Hjtzehp8F80Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "outputId": "80492222-eff8-48d7-b72a-01a380576c7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2wAAAJ8CAYAAACCzSJ+AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzs3Xd0FNXbwPHvbEnvlSQEAgkhQOi9IyBFRAEFQenYCyJWXgvyQ8XeC1go9kYRRUGk9957SYCEJKT3bLbM+8fKhiUbJEiSFZ7POXtOMnvv7L0zd3bnznPnjqKqqooQQgghhBBCCKejqekCCCGEEEIIIYRwTDpsQgghhBBCCOGkpMMmhBBCCCGEEE5KOmxCCCGEEEII4aSkwyaEEEIIIYQQTko6bEIIIYQQQgjhpKTDJoQQQgghhBBOSjpsQgghhBBCCOGkpMMmhBBCCCGEEE5KOmxCCCFqXGJiIoqiMHfu3Ku63qioKMaOHXtV1ymEEEJUJ+mwCSHENSovL49p06bRvHlzvLy8cHd3Jz4+nqeffpqzZ8/WdPGumo0bN/Liiy+Sk5NT00WxmTt3LoqisH37dofv9+jRg/j4+Cotw++//86LL75YpZ8hhBCi6kmHTQghnMyBAwdwcXHBy8vL4cvFxYUTJ05cch0nT56kRYsWTJ8+ncaNG/Paa6/x/vvvc8MNN/DFF1/Qo0eP6qlMNdi4cSPTpk1z2GE7cuQIn332WfUXygn8/vvvTJs2raaLIYQQ4l/S1XQBhBBC2FNVlXbt2rF+/XqH73fo0AFVVSvMbzKZGDJkCGlpaaxevZouXbrYvf/yyy/z2muvXZWyFhYW4unpWW65xWKhtLQUNze3q/I5V8rV1bVGP18IIYT4tyTCJoQQ15j58+ezZ88enn322XKdNQAfHx9efvllu2U//fQTrVu3xt3dnaCgIEaOHElycrJdmrFjx+Ll5cWJEye46aab8Pb25q677gJAURQefvhhvvnmG5o0aYKrqytLly4FIDk5mfHjxxMaGoqrqytNmjRh9uzZ/1iPvXv3MnbsWOrXr4+bmxu1atVi/PjxZGZm2tK8+OKLPPnkkwDUq1cPRVFQFIXExETA8T1sJ0+eZOjQoQQEBODh4UGHDh1YsmSJXZrVq1ejKAo//vgjL7/8MrVr18bNzY1evXpx/Pjxfyz7lfr6669t+yEgIIDhw4dz5swZuzTr1q1j6NCh1KlTB1dXVyIjI3nssccoLi62pRk7diwfffQRgG2bKIoClN0v+Oabb/LRRx9Rv359PDw86NOnD2fOnEFVVaZPn07t2rVxd3fn1ltvJSsry64Mv/zyCwMGDCA8PBxXV1eio6OZPn06ZrPZLt35oZ87duygU6dOuLu7U69ePWbOnFkVm08IIa5JEmETQohrzOLFiwEYNWrUZaWfO3cu48aNo23btsyYMYO0tDTee+89NmzYwK5du/Dz87OlNZlM9O3bly5duvDmm2/i4eFhe2/lypX8+OOPPPzwwwQFBREVFUVaWhodOnSwdeiCg4P5448/mDBhAnl5eUyaNKnCci1fvpyTJ08ybtw4atWqxYEDB/j00085cOAAmzdvRlEUhgwZwtGjR/nuu+945513CAoKAiA4ONjhOtPS0ujUqRNFRUVMnDiRwMBA5s2bxy233MLPP//M4MGD7dK/+uqraDQannjiCXJzc3n99de566672LJly2Vt29zcXDIyMsotNxqN5Za9/PLLPP/88wwbNoy7776b9PR0PvjgA7p162a3H3766SeKiop44IEHCAwMZOvWrXzwwQckJSXx008/AXDfffdx9uxZli9fzldffeWwbN988w2lpaU88sgjZGVl8frrrzNs2DB69uzJ6tWrefrppzl+/DgffPABTzzxhF0ne+7cuXh5eTF58mS8vLxYuXIlL7zwAnl5ebzxxht2n5Odnc1NN93EsGHDGDFiBD/++CMPPPAALi4ujB8//rK2oxBCXNdUIYQQTmXfvn1q586dK3y/ffv26rFjxyp8v2XLlqqvr+9lfVZpaakaEhKixsfHq8XFxbblv/32mwqoL7zwgm3ZmDFjVEB95plnyq0HUDUajXrgwAG75RMmTFDDwsLUjIwMu+XDhw9XfX191aKiIlVVVTUhIUEF1Dlz5tjSnH/vQt99950KqGvXrrUte+ONN1RATUhIKJe+bt266pgxY2z/T5o0SQXUdevW2Zbl5+er9erVU6OiolSz2ayqqqquWrVKBdRGjRqpBoPBlva9995TAXXfvn3lPutCc+bMUYFLvpo0aWJLn5iYqGq1WvXll1+2W8++fftUnU5nt9zRdpkxY4aqKIp66tQp27KHHnpIdfQzf35bBwcHqzk5ObblU6ZMUQG1efPmqtFotC0fMWKE6uLi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ubm5dut56623GDduHF27diU8PJz33nuPHTt22N738PBg7dq1PP300wwZMoT8/HwiIiLo1asXPj4Vz5R2sU8++YT/+7//48EHHyQzM5M6deqUa0QTJkzglVdesYV/a8rCv3JwddFw//AQPN01HDpZwvRPzmI0lf0I1wrS4+NV9uMeXceN6RPLZsYbP8QaqVi5JY8PvzkHwNtzUxk5MJBJo0Px8tCQnm3i2yVZLFtf8w/O9m0dT8cVX9n+b/ymdd+c+XIBeydMwTUsGPe/OzEAxYlJbLvlPhq/NYWoR0ZTkpTKvvueI2P5elualJ/+wCU4gNipE60PkN5ziK03303pOcfPxKkJ12u9+8XXJ7uwhI9X7SSjoJiGtQL4eGQf20QkqbmFaC44+6rl68Uno/ryxtItDP1kESE+HtzVvgnjujh+4LSzatO5HwV52fz2/cfWB2dHNeThZz/Gx886hDU7I9XuotbaP3/CZDLy2ZuP263npqH3c/MdD5CTdY6921cD8MoTw+zSTHrxc2Lj21ZthS7ToTPWIZFd4xU83RTO5cCPay22iUh8POyHxidnWjti3eI1dG+qkF0A8zdYyPj7q8rbHWIjrO1jQl/7y+zfrDJzuuLHUdaINXvMuOgUhnTV4/b3g7PnLLW//ybQR4OnW9k22HvSgqebiRtb6/H2sE5nPvuPUqebDfJS1u+34KJTuKWjzvrg7DSVr/4y2kXE/L0VPF3LjvX9iRY83KwP3PZy15KapfLVXybbRCRhAQqRf88Y+dgQF7vPe/vnUnJqcObAmBY3UVKYxfY/P6AoP52g8EbcNOEzPP4e4liQc9ZuREutqFb0vPNNti19l61L38E3KIq+oz8koFb5Yc//BWv3mnHRweDO1v19Kk1lzjL7dh7gbf0OOG9fgrWd926tw9vdGmGds8xoG/5sMkNULYXO8dZjp6AYElMtzPzNWG5yGvHPpkyZwuTJk+2WubpenWDD6tWreeWVV/j4449p3749x48f59FHH2X69Ok8//zzV+UzLqaoF99UJa6aHj160KJFC959992aLko569ato1evXpw5c6bcVYXLMWRi9T+zzRlM+GRATRdBVKNeX156uPC1akO8cz2MurpsPaT/50TXoNxc54lQVicXFycMUVYDP7/rs51nZDjJWOJq9soE53tOJ0DK43dW6frD3vr2stKVlpbi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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GMDROmn1aKlE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ✅ STEP 6: Data Preprocessing & Feature Engineering\n"
      ],
      "metadata": {
        "id": "mB8ly3HDLWPm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numerical_cols = ['Age', 'Blood_Pressure', 'Cholesterol', 'Heart_Rate',\n",
        "                  'Recency', 'Frequency', 'Monetary', 'Time']\n",
        "categorical_cols = ['Gender', 'Smoking_Status', 'Exercise_Level']\n",
        "\n",
        "# Pipelines\n",
        "num_pipeline = Pipeline([('scaler', StandardScaler())])\n",
        "cat_pipeline = Pipeline([('encoder', OneHotEncoder(drop='first'))])\n",
        "\n",
        "# Combined Preprocessor\n",
        "preprocessor = ColumnTransformer([\n",
        "    ('num', num_pipeline, numerical_cols),\n",
        "    ('cat', cat_pipeline, categorical_cols)\n",
        "])\n"
      ],
      "metadata": {
        "id": "gUYh3wN5a5lz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "z1fIlLDBa7is"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "🔵 Define Features and Target"
      ],
      "metadata": {
        "id": "2hETR30GLZx5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop(columns=['Recommendation'])  # Input features\n",
        "y = df['Recommendation']                # Output label\n",
        "\n",
        "print(\"✅ Features and Target Defined\")\n",
        "print(\"🧾 Feature Columns:\", X.columns.tolist())\n",
        "print(\"🎯 Target Name: Recommendation\")\n"
      ],
      "metadata": {
        "id": "W7iv1dTiF8yG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "23113ffa-d6f3-4b5f-e4dd-c7f48d943662"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Features and Target Defined\n",
            "🧾 Feature Columns: ['Recency', 'Frequency', 'Monetary', 'Time', 'Class', 'Age', 'Gender', 'Blood_Pressure', 'Cholesterol', 'Heart_Rate', 'Smoking_Status', 'Exercise_Level']\n",
            "🎯 Target Name: Recommendation\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "🔵 Identify Categorical & Numerical Columns"
      ],
      "metadata": {
        "id": "BUItt10cMDfN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Categorical columns (non-numeric health/lifestyle info)\n",
        "categorical_cols = ['Gender', 'Smoking_Status', 'Exercise_Level']\n",
        "\n",
        "# Numerical columns (to be scaled)\n",
        "numerical_cols = [\n",
        "    'Age', 'Blood_Pressure', 'Cholesterol', 'Heart_Rate',\n",
        "    'Recency', 'Frequency', 'Monetary', 'Time'\n",
        "]\n",
        "\n",
        "print(\"🧪 Numerical Columns:\", numerical_cols)\n",
        "print(\"🔤 Categorical Columns:\", categorical_cols)\n"
      ],
      "metadata": {
        "id": "bQCh8UWlF8vu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a99a79a3-5130-42be-ecd4-c837981263ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🧪 Numerical Columns: ['Age', 'Blood_Pressure', 'Cholesterol', 'Heart_Rate', 'Recency', 'Frequency', 'Monetary', 'Time']\n",
            "🔤 Categorical Columns: ['Gender', 'Smoking_Status', 'Exercise_Level']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "🔵 Preprocessing Pipelines for Each Column Type"
      ],
      "metadata": {
        "id": "PwmjMJXSMRlK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Pipeline for numerical features\n",
        "num_pipeline = Pipeline(steps=[\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "# Pipeline for categorical features\n",
        "cat_pipeline = Pipeline(steps=[\n",
        "    ('onehot', OneHotEncoder(drop='first'))  # Drop first to avoid dummy trap\n",
        "])\n",
        "\n",
        "# Combine both into a column transformer\n",
        "preprocessor = ColumnTransformer(transformers=[\n",
        "    ('num', num_pipeline, numerical_cols),\n",
        "    ('cat', cat_pipeline, categorical_cols)\n",
        "])\n",
        "\n",
        "print(\"✅ Preprocessing Pipelines Defined\")\n"
      ],
      "metadata": {
        "id": "j8hWTBn_F8q3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ae1623b7-9ef9-404b-f074-49c89f7cd2db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Preprocessing Pipelines Defined\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "🔵 Train-Test Split with Stratification (Balanced)"
      ],
      "metadata": {
        "id": "PMlFJG0KMb3b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# ✅ Step 7D: Train-Test Split (80/20) with Stratification\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y,\n",
        "    test_size=0.2,\n",
        "    random_state=42,\n",
        "    stratify=y  # ensures all classes are fairly represented\n",
        ")\n",
        "\n",
        "print(\"✅ Dataset Split into Train and Test Sets\")\n",
        "print(\"📚 Training Set Size:\", X_train.shape)\n",
        "print(\"🧪 Testing Set Size:\", X_test.shape)\n"
      ],
      "metadata": {
        "id": "tzFW-81SF8op",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "34c56c38-5f0b-417d-c44b-e8883487af5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Dataset Split into Train and Test Sets\n",
            "📚 Training Set Size: (598, 12)\n",
            "🧪 Testing Set Size: (150, 12)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Double check of the Balancing of Data"
      ],
      "metadata": {
        "id": "X0uw8NP6TN42"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check class balance in train and test\n",
        "print(\"Train Class Balance:\")\n",
        "print(y_train.value_counts(normalize=True))\n",
        "\n",
        "print(\"\\nTest Class Balance:\")\n",
        "print(y_test.value_counts(normalize=True))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NhWrJ__0TI4h",
        "outputId": "744ae995-1b46-45e0-aa5e-b259fd79d242"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Class Balance:\n",
            "Recommendation\n",
            "1    0.434783\n",
            "2    0.314381\n",
            "0    0.242475\n",
            "3    0.008361\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "Test Class Balance:\n",
            "Recommendation\n",
            "1    0.433333\n",
            "2    0.313333\n",
            "0    0.240000\n",
            "3    0.013333\n",
            "Name: proportion, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "🔵 Wrap Preprocessing and Classifier in Pipeline"
      ],
      "metadata": {
        "id": "_xY0M8ReMnAv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('classifier', RandomForestClassifier(random_state=42))\n",
        "])\n",
        "\n",
        "print(\"✅ ML Pipeline Ready\")\n"
      ],
      "metadata": {
        "id": "D7g8ClejF8kG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fad04c97-aa60-4a48-8dcf-20137db01189"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ ML Pipeline Ready\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#✅ STEP 7: MODEL TRAINING AND EVALUATION (COMPLETE & CORRECTED)\n"
      ],
      "metadata": {
        "id": "-tGr9YHJM5VI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "🔵 Define ML Models to Compare"
      ],
      "metadata": {
        "id": "zz61ld0bTkx5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "\n",
        "models = {\n",
        "    \"Logistic Regression\": LogisticRegression(max_iter=1000, random_state=42),\n",
        "    \"Decision Tree\": DecisionTreeClassifier(random_state=42),\n",
        "    \"Random Forest\": RandomForestClassifier(random_state=42),\n",
        "    \"SVM\": SVC(probability=True, random_state=42),\n",
        "    \"Naive Bayes\": GaussianNB()\n",
        "}\n",
        "\n",
        "print(\"✅ All models defined\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d8mGb164Tj18",
        "outputId": "1abb80f4-1461-4d48-9d44-873b4e6d1679"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ All models defined\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "🔵 Train & Evaluate Each Model in a Clean Loop"
      ],
      "metadata": {
        "id": "RdiaouncT5g2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Train, Predict, Evaluate All Models\n",
        "\n",
        "from sklearn.metrics import accuracy_score, classification_report, roc_auc_score\n",
        "from sklearn.preprocessing import label_binarize\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "results = []\n",
        "\n",
        "for name, clf in models.items():\n",
        "    pipeline = Pipeline(steps=[\n",
        "        ('preprocessor', preprocessor),\n",
        "        ('classifier', clf)\n",
        "    ])\n",
        "\n",
        "    pipeline.fit(X_train, y_train)\n",
        "    y_pred = pipeline.predict(X_test)\n",
        "\n",
        "    acc = accuracy_score(y_test, y_pred)\n",
        "    f1 = classification_report(y_test, y_pred, output_dict=True, zero_division=0)['weighted avg']['f1-score']\n",
        "\n",
        "    if hasattr(pipeline.named_steps['classifier'], \"predict_proba\"):\n",
        "        y_proba = pipeline.predict_proba(X_test)\n",
        "        y_test_bin = label_binarize(y_test, classes=[0, 1, 2, 3])\n",
        "        auc = roc_auc_score(y_test_bin, y_proba, multi_class='ovr')\n",
        "    else:\n",
        "        auc = \"N/A\"\n",
        "\n",
        "    results.append({\n",
        "        \"Model\": name,\n",
        "        \"Accuracy\": round(acc, 4),\n",
        "        \"F1-Score\": round(f1, 4),\n",
        "        \"ROC-AUC\": round(auc, 4) if auc != \"N/A\" else auc\n",
        "    })\n"
      ],
      "metadata": {
        "id": "5TNF4CqjT-NS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "🔵 Show Results as Table + Visualization"
      ],
      "metadata": {
        "id": "oqHeeJFmVh4d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Final Accuracy Comparison of All Models\n",
        "\n",
        "models = {\n",
        "    \"Logistic Regression\": LogisticRegression(max_iter=1000, random_state=42, class_weight='balanced'),\n",
        "    \"Decision Tree\": DecisionTreeClassifier(random_state=42, class_weight='balanced'),\n",
        "    \"Random Forest\": RandomForestClassifier(random_state=42, class_weight='balanced'),\n",
        "    \"SVM\": SVC(probability=True, random_state=42, class_weight='balanced'),\n",
        "    \"Naive Bayes\": GaussianNB()  # NB doesn't support class_weight\n",
        "}\n",
        "\n",
        "results = []\n",
        "\n",
        "for name, model in models.items():\n",
        "    pipeline = Pipeline(steps=[\n",
        "        ('preprocessor', preprocessor),\n",
        "        ('classifier', model)\n",
        "    ])\n",
        "\n",
        "    pipeline.fit(X_train, y_train)\n",
        "    y_pred = pipeline.predict(X_test)\n",
        "\n",
        "    # Accuracy & F1\n",
        "    acc = accuracy_score(y_test, y_pred)\n",
        "    f1 = classification_report(y_test, y_pred, output_dict=True)['weighted avg']['f1-score']\n",
        "\n",
        "    # ROC-AUC (optional)\n",
        "    if hasattr(model, \"predict_proba\"):\n",
        "        y_test_bin = label_binarize(y_test, classes=[0, 1, 2, 3])\n",
        "        y_proba = pipeline.predict_proba(X_test)\n",
        "        auc = roc_auc_score(y_test_bin, y_proba, multi_class='ovr')\n",
        "    else:\n",
        "        auc = \"N/A\"\n",
        "\n",
        "    results.append({\n",
        "        'Model': name,\n",
        "        'Accuracy': round(acc, 4),\n",
        "        'F1-Score': round(f1, 4),\n",
        "        'ROC-AUC': round(auc, 4) if auc != \"N/A\" else auc\n",
        "    })\n",
        "\n",
        "# Create DataFrame of Results\n",
        "results_df = pd.DataFrame(results).sort_values(by='Accuracy', ascending=False)\n",
        "display(results_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "XCdLnssFVjF8",
        "outputId": "f73030aa-3b42-43b4-c205-a0b1f0b302a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                 Model  Accuracy  F1-Score  ROC-AUC\n",
              "1        Decision Tree    0.9533    0.9475   0.8559\n",
              "2        Random Forest    0.9333    0.9271   0.9854\n",
              "3                  SVM    0.8200    0.8202   0.9561\n",
              "0  Logistic Regression    0.7333    0.7302   0.9027\n",
              "4          Naive Bayes    0.6067    0.6192   0.7810"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4887b8d6-2b63-4cb4-9a3c-1d5d958ab96d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>F1-Score</th>\n",
              "      <th>ROC-AUC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>0.9533</td>\n",
              "      <td>0.9475</td>\n",
              "      <td>0.8559</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>0.9333</td>\n",
              "      <td>0.9271</td>\n",
              "      <td>0.9854</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>SVM</td>\n",
              "      <td>0.8200</td>\n",
              "      <td>0.8202</td>\n",
              "      <td>0.9561</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>0.7333</td>\n",
              "      <td>0.7302</td>\n",
              "      <td>0.9027</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Naive Bayes</td>\n",
              "      <td>0.6067</td>\n",
              "      <td>0.6192</td>\n",
              "      <td>0.7810</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4887b8d6-2b63-4cb4-9a3c-1d5d958ab96d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4887b8d6-2b63-4cb4-9a3c-1d5d958ab96d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4887b8d6-2b63-4cb4-9a3c-1d5d958ab96d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-780ff516-afb1-4bd4-8b8a-b241be53a194\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-780ff516-afb1-4bd4-8b8a-b241be53a194')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-780ff516-afb1-4bd4-8b8a-b241be53a194 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_4ee6eb85-5e1d-4abb-a6d9-c0af6931df71\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('results_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4ee6eb85-5e1d-4abb-a6d9-c0af6931df71 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('results_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "results_df",
              "summary": "{\n  \"name\": \"results_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Random Forest\",\n          \"Naive Bayes\",\n          \"SVM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14409133214735717,\n        \"min\": 0.6067,\n        \"max\": 0.9533,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9333,\n          0.6067,\n          0.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.137375991352201,\n        \"min\": 0.6192,\n        \"max\": 0.9475,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9271,\n          0.6192,\n          0.8202\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ROC-AUC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08136649801976241,\n        \"min\": 0.781,\n        \"max\": 0.9854,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9854,\n          0.781,\n          0.9561\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "🔵 Visualize Accuracy of All Model"
      ],
      "metadata": {
        "id": "g2wlmtdvVua5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Accuracy Visualization\n",
        "\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.barplot(data=results_df, x='Model', y='Accuracy', palette='crest')\n",
        "plt.title(\"📈 Accuracy Comparison of Models\")\n",
        "plt.ylim(0, 1)\n",
        "plt.xticks(rotation=20)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 532
        },
        "id": "PtggAFZeVvgx",
        "outputId": "372e1ad1-f31c-4741-c163-4385a812c65e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Gkx29R6BXtsz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "g00z9bYUBo-_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Q4jK7MfUA-nY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ✅ Step 8: Model Comparison and Selection"
      ],
      "metadata": {
        "id": "6lGlkDX_Bcw6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# Define candidate models\n",
        "models = {\n",
        "    'Logistic Regression': LogisticRegression(max_iter=1000),\n",
        "    'Random Forest': RandomForestClassifier(random_state=42),\n",
        "    'Gradient Boosting': GradientBoostingClassifier(random_state=42),\n",
        "    'SVM': SVC(probability=True)\n",
        "}\n",
        "\n",
        "# Evaluate models using cross-validation\n",
        "results = []\n",
        "\n",
        "for name, model in models.items():\n",
        "    pipeline = Pipeline([\n",
        "        ('preprocessor', preprocessor),\n",
        "        ('classifier', model)\n",
        "    ])\n",
        "    scores = cross_val_score(pipeline, X_train, y_train, cv=5, scoring='accuracy')\n",
        "    results.append({'Model': name, 'Accuracy': scores.mean()})\n",
        "\n",
        "# Create results DataFrame\n",
        "results_df = pd.DataFrame(results).sort_values(by='Accuracy', ascending=False)\n",
        "results_df.reset_index(drop=True, inplace=True)\n",
        "results_df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "id": "nj36oRIHBchE",
        "outputId": "0c92e495-53f7-4005-c3ae-7e32016da6f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Model  Accuracy\n",
              "0    Gradient Boosting  0.938179\n",
              "1        Random Forest  0.909748\n",
              "2                  SVM  0.809328\n",
              "3  Logistic Regression  0.786050"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6fcbc1d9-9a57-49ce-8c05-4a872d68a197\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Gradient Boosting</td>\n",
              "      <td>0.938179</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>0.909748</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>SVM</td>\n",
              "      <td>0.809328</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>0.786050</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6fcbc1d9-9a57-49ce-8c05-4a872d68a197')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6fcbc1d9-9a57-49ce-8c05-4a872d68a197 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6fcbc1d9-9a57-49ce-8c05-4a872d68a197');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-17665708-54b5-4191-b729-a59d23e3057c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-17665708-54b5-4191-b729-a59d23e3057c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-17665708-54b5-4191-b729-a59d23e3057c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_5c49c8b7-cb59-49b9-9f15-8eebb1942ffc\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('results_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5c49c8b7-cb59-49b9-9f15-8eebb1942ffc button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('results_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "results_df",
              "summary": "{\n  \"name\": \"results_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Random Forest\",\n          \"Logistic Regression\",\n          \"Gradient Boosting\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0744319373671145,\n        \"min\": 0.7860504201680671,\n        \"max\": 0.9381792717086835,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9097478991596638,\n          0.7860504201680671,\n          0.9381792717086835\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "✅ Best Model Selection (within 80–90% Accuracy Range)\n"
      ],
      "metadata": {
        "id": "AucXiDTpB-sl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter models in the desired accuracy range\n",
        "filtered_models = results_df[(results_df['Accuracy'] >= 0.80) & (results_df['Accuracy'] <= 0.90)]\n",
        "\n",
        "if not filtered_models.empty:\n",
        "    best_model_name = filtered_models.iloc[0]['Model']\n",
        "    print(f\"✅ Best model within 80–90% accuracy: {best_model_name}\")\n",
        "else:\n",
        "    best_model_name = results_df.iloc[0]['Model']\n",
        "    print(f\"⚠️ No model in 80–90% range. Using best available model: {best_model_name}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1flAXVssWAH1",
        "outputId": "470d531b-6197-4658-8f03-a4c25902677a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Best model within 80–90% accuracy: SVM\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ✅ Step 9: Final Model Training and Evaluation\n"
      ],
      "metadata": {
        "id": "CY3aECDqCJx8"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bc3_N23vEOfO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train Final Model on Full Training Set"
      ],
      "metadata": {
        "id": "iWvRfje9CTQB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Retrieve best model object\n",
        "final_model = models[best_model_name]\n",
        "\n",
        "# Create final pipeline\n",
        "final_pipeline = Pipeline([\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('classifier', final_model)\n",
        "])\n",
        "\n",
        "# Train on training data\n",
        "final_pipeline.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 245
        },
        "id": "AQGrJpldWAE0",
        "outputId": "15161a1a-7f66-4078-f1b8-43d0814c704b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('preprocessor',\n",
              "                 ColumnTransformer(transformers=[('num',\n",
              "                                                  Pipeline(steps=[('scaler',\n",
              "                                                                   StandardScaler())]),\n",
              "                                                  ['Age', 'Blood_Pressure',\n",
              "                                                   'Cholesterol', 'Heart_Rate',\n",
              "                                                   'Recency', 'Frequency',\n",
              "                                                   'Monetary', 'Time']),\n",
              "                                                 ('cat',\n",
              "                                                  Pipeline(steps=[('onehot',\n",
              "                                                                   OneHotEncoder(drop='first'))]),\n",
              "                                                  ['Gender', 'Smoking_Status',\n",
              "                                                   'Exercise_Level'])])),\n",
              "                ('classifier', SVC(probability=True))])"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler())]),\n",
              "                                                  [&#x27;Age&#x27;, &#x27;Blood_Pressure&#x27;,\n",
              "                                                   &#x27;Cholesterol&#x27;, &#x27;Heart_Rate&#x27;,\n",
              "                                                   &#x27;Recency&#x27;, &#x27;Frequency&#x27;,\n",
              "                                                   &#x27;Monetary&#x27;, &#x27;Time&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;onehot&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;first&#x27;))]),\n",
              "                                                  [&#x27;Gender&#x27;, &#x27;Smoking_Status&#x27;,\n",
              "                                                   &#x27;Exercise_Level&#x27;])])),\n",
              "                (&#x27;classifier&#x27;, SVC(probability=True))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>Pipeline</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler())]),\n",
              "                                                  [&#x27;Age&#x27;, &#x27;Blood_Pressure&#x27;,\n",
              "                                                   &#x27;Cholesterol&#x27;, &#x27;Heart_Rate&#x27;,\n",
              "                                                   &#x27;Recency&#x27;, &#x27;Frequency&#x27;,\n",
              "                                                   &#x27;Monetary&#x27;, &#x27;Time&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;onehot&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;first&#x27;))]),\n",
              "                                                  [&#x27;Gender&#x27;, &#x27;Smoking_Status&#x27;,\n",
              "                                                   &#x27;Exercise_Level&#x27;])])),\n",
              "                (&#x27;classifier&#x27;, SVC(probability=True))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>preprocessor: ColumnTransformer</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler())]),\n",
              "                                 [&#x27;Age&#x27;, &#x27;Blood_Pressure&#x27;, &#x27;Cholesterol&#x27;,\n",
              "                                  &#x27;Heart_Rate&#x27;, &#x27;Recency&#x27;, &#x27;Frequency&#x27;,\n",
              "                                  &#x27;Monetary&#x27;, &#x27;Time&#x27;]),\n",
              "                                (&#x27;cat&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;onehot&#x27;,\n",
              "                                                  OneHotEncoder(drop=&#x27;first&#x27;))]),\n",
              "                                 [&#x27;Gender&#x27;, &#x27;Smoking_Status&#x27;,\n",
              "                                  &#x27;Exercise_Level&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>num</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Age&#x27;, &#x27;Blood_Pressure&#x27;, &#x27;Cholesterol&#x27;, &#x27;Heart_Rate&#x27;, &#x27;Recency&#x27;, &#x27;Frequency&#x27;, &#x27;Monetary&#x27;, &#x27;Time&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>StandardScaler</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>cat</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Gender&#x27;, &#x27;Smoking_Status&#x27;, &#x27;Exercise_Level&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>OneHotEncoder</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(drop=&#x27;first&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(probability=True)</pre></div> </div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "📊 Evaluation on Test Set"
      ],
      "metadata": {
        "id": "po77FBuACaKI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "\n",
        "# Predictions\n",
        "y_pred = final_pipeline.predict(X_test)\n",
        "\n",
        "# Evaluation report\n",
        "print(\"🧾 Classification Report on Test Data:\")\n",
        "print(classification_report(y_test, y_pred))\n",
        "\n",
        "print(\"🧾 Confusion Matrix:\")\n",
        "sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "PsTl6RrVWACf",
        "outputId": "9b0656de-fc4c-408b-8e9b-7216cdc7dec2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🧾 Classification Report on Test Data:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.86      0.91        36\n",
            "           1       0.88      0.88      0.88        65\n",
            "           2       0.81      0.91      0.86        47\n",
            "           3       0.00      0.00      0.00         2\n",
            "\n",
            "    accuracy                           0.87       150\n",
            "   macro avg       0.66      0.66      0.66       150\n",
            "weighted avg       0.87      0.87      0.87       150\n",
            "\n",
            "🧾 Confusion Matrix:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Accuracy Check\n",
        "\n"
      ],
      "metadata": {
        "id": "BMyeY8X9CgbH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "test_accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"✅ Final Model Test Accuracy: {test_accuracy:.2%}\")\n",
        "\n",
        "if 0.80 <= test_accuracy <= 0.90:\n",
        "    print(\"🎯 Accuracy is within the desired range of 80–90%.\")\n",
        "elif test_accuracy > 0.90:\n",
        "    print(\"⚠️ High accuracy may indicate overfitting. Consider regularization.\")\n",
        "else:\n",
        "    print(\"⚠️ Accuracy below expected. Consider tuning or trying different models.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tQXRM1tOV__V",
        "outputId": "b2339482-4ddf-4a95-ed33-75bb29b7a1a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Final Model Test Accuracy: 87.33%\n",
            "🎯 Accuracy is within the desired range of 80–90%.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 9: Personalized Recommendation System"
      ],
      "metadata": {
        "id": "cb144jVxCwAs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " Step 1: Get the Correct Feature Names"
      ],
      "metadata": {
        "id": "2JjyVWaUEagp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Expected input columns for prediction:\")\n",
        "print(X.columns.tolist())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6LaJpgGBDZhs",
        "outputId": "02531bed-423b-4583-e018-d783c81648ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Expected input columns for prediction:\n",
            "['Recency', 'Frequency', 'Monetary', 'Time', 'Class', 'Age', 'Gender', 'Blood_Pressure', 'Cholesterol', 'Heart_Rate', 'Smoking_Status', 'Exercise_Level']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step 2: Create Sample Patient Input"
      ],
      "metadata": {
        "id": "9K4MNJHFEXYt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "new_patient = pd.DataFrame({\n",
        "    'Age': [50],\n",
        "    'Gender': ['Male'],               # Must match seen values\n",
        "    'Blood_Pressure': [130],\n",
        "    'Cholesterol': [200],\n",
        "    'Heart_Rate': [75],\n",
        "    'Smoking_Status': ['Smoker'],     # <- Use valid category\n",
        "    'Exercise_Level': ['Moderate'],   # <- Use valid category\n",
        "    'Recency': [12],\n",
        "    'Frequency': [4],\n",
        "    'Monetary': [600],\n",
        "    'Time': [6]\n",
        "})\n"
      ],
      "metadata": {
        "id": "rEMmUJyBDZeK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step 3: Define Recommendation Mapping + Function"
      ],
      "metadata": {
        "id": "kMm7fSTfEeLU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Map numeric predictions to recommendation text\n",
        "recommendation_mapping = {\n",
        "    0: 'No action needed',\n",
        "    1: 'Regular check-up',\n",
        "    2: 'Lifestyle changes',\n",
        "    3: 'Medication'\n",
        "}\n"
      ],
      "metadata": {
        "id": "bVmFyY-NDZbV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_recommendation(patient_df):\n",
        "    \"\"\"\n",
        "    Generates a healthcare recommendation for a given patient.\n",
        "    \"\"\"\n",
        "    prediction = final_pipeline.predict(patient_df)\n",
        "    label = prediction[0]\n",
        "    return recommendation_mapping.get(label, \"Unknown Recommendation\")\n"
      ],
      "metadata": {
        "id": "5FICrn-KDZYo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step 4: Run the Function on Sample Input"
      ],
      "metadata": {
        "id": "zE1ZZ5H1EiMP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "recommendation = generate_recommendation(new_patient)\n",
        "print(\"📋 Personalized Recommendation:\", recommendation)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2rGsc6EyDZTn",
        "outputId": "e3e4d4ad-4700-4ec0-ecfd-c03341a6218a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📋 Personalized Recommendation: Regular check-up\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cygNSsYZEQN1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9DdXJ9EiDZRD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "eR_3L1UBDZM8"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}